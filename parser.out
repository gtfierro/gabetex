Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PHRASE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> LINE
Rule 2     statement -> expression PLUS expression
Rule 3     statement -> expression MINUS expression
Rule 4     statement -> expression TIMES expression
Rule 5     statement -> expression DIVIDE expression
Rule 6     statement -> expression POWER expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 5
LINE                 : 1
LPAREN               : 7
MINUS                : 3
NUMBER               : 8
PHRASE               : 
PLUS                 : 2
POWER                : 6
RPAREN               : 7
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

expression           : 2 2 3 3 4 4 5 5 6 6 7
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . LINE
    (2) statement -> . expression PLUS expression
    (3) statement -> . expression MINUS expression
    (4) statement -> . expression TIMES expression
    (5) statement -> . expression DIVIDE expression
    (6) statement -> . expression POWER expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LINE            shift and go to state 4
    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 5
    statement                      shift and go to state 2

state 1

    (8) expression -> NUMBER .

    $end            reduce using rule 8 (expression -> NUMBER .)
    RPAREN          reduce using rule 8 (expression -> NUMBER .)
    PLUS            reduce using rule 8 (expression -> NUMBER .)
    MINUS           reduce using rule 8 (expression -> NUMBER .)
    TIMES           reduce using rule 8 (expression -> NUMBER .)
    DIVIDE          reduce using rule 8 (expression -> NUMBER .)
    POWER           reduce using rule 8 (expression -> NUMBER .)


state 2

    (0) S' -> statement .



state 3

    (7) expression -> LPAREN . expression RPAREN
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 6

state 4

    (1) statement -> LINE .

    $end            reduce using rule 1 (statement -> LINE .)


state 5

    (2) statement -> expression . PLUS expression
    (3) statement -> expression . MINUS expression
    (4) statement -> expression . TIMES expression
    (5) statement -> expression . DIVIDE expression
    (6) statement -> expression . POWER expression

    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 7
    POWER           shift and go to state 8


state 6

    (7) expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 12


state 7

    (5) statement -> expression DIVIDE . expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 13

state 8

    (6) statement -> expression POWER . expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 14

state 9

    (4) statement -> expression TIMES . expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 15

state 10

    (2) statement -> expression PLUS . expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 16

state 11

    (3) statement -> expression MINUS . expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 1

    expression                     shift and go to state 17

state 12

    (7) expression -> LPAREN expression RPAREN .

    $end            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 7 (expression -> LPAREN expression RPAREN .)


state 13

    (5) statement -> expression DIVIDE expression .

    $end            reduce using rule 5 (statement -> expression DIVIDE expression .)


state 14

    (6) statement -> expression POWER expression .

    $end            reduce using rule 6 (statement -> expression POWER expression .)


state 15

    (4) statement -> expression TIMES expression .

    $end            reduce using rule 4 (statement -> expression TIMES expression .)


state 16

    (2) statement -> expression PLUS expression .

    $end            reduce using rule 2 (statement -> expression PLUS expression .)


state 17

    (3) statement -> expression MINUS expression .

    $end            reduce using rule 3 (statement -> expression MINUS expression .)

